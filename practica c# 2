//--------------------PROPERTIES-------------------
    static void Main(string[] args)
    {
        Empleado Juan = new Empleado("Juan");
        Juan.SALARIO = 500;
        Console.WriteLine($"El salario del empleado es: {Juan.SALARIO}");
    }
}

class Empleado
{
    private string _nombre;
    private double _salario;

    public Empleado(string nombre)
    {
        this._nombre = nombre;       
    }
    private double evaluaSalario(double salario)
    {
        if(salario < 0) return 0;
        else return salario;    
    }

    //CREACION DE PROPIEDAD

    //public double SALARIO
    //{
    //    get{return this.salario;}

    //    set{this.salario = evaluaSalario(value);}
    //}

    public double SALARIO
    {
        get => this._salario;
        set => this._salario = evaluaSalario(value);
    }
    //-----------------------ENUM------------------------
    namespace practica2 
{ 
    enum Bonus {bajo = 500, normal = 1000, bueno = 1500, extra = 3000}
    class Program
    {
    static void Main(string[] args)
    {
            Bonus Antonio = Bonus.extra                                                             ;
            double bonusAntonio = (double)Antonio;

            double salarioAntonio = 1500 + bonusAntonio;

            Console.WriteLine(salarioAntonio);

            Empleado miEmpleado = new Empleado(Antonio, 1200);
            Console.WriteLine($"El salario del empleado es: {miEmpleado.getSalario()}");
    }

    }

    class Empleado
    {
        private double bonus, salario;

        public Empleado(Bonus bonusEmpleado, double salario)
        {
            bonus = (double)bonusEmpleado;
            this.salario = salario;
        }
        public double getSalario()
        {
            return salario + bonus;
        }
        //---------------------DESTRUCTORES--------------------

        static void Main(string[] args)
        {
            ManejoArchivos miArchivo = new ManejoArchivos();
            miArchivo.mensaje();
        }

    }
    class ManejoArchivos
    {
        StreamReader archivo = null;
        int contador = 0;
        string linea;

        public ManejoArchivos()
        {
            archivo = new StreamReader(@"C:\audio.log");
            while((linea = archivo.ReadLine()) != null)
            {
                Console.WriteLine(linea);
                contador++; 
            }
        }
        public void mensaje()
        {
            Console.WriteLine($"hay {contador} lineas");
        }
        ~ManejoArchivos() //USO DEL DESTRUCTOR
        {
            archivo.Close();
        }
    }
    
        //----------------------PROGRACION GNERICA---------------------

        static void Main(string[] args)
        {
            AlmacenObjetos<Empleado> archivos = new AlmacenObjetos<Empleado>(4);
            //archivos.agregar("Juan");
            //archivos.agregar("Elena");
            //archivos.agregar("Antonio");
            //archivos.agregar("Sandra");
            archivos.agregar(new Empleado(1500));
            archivos.agregar(new Empleado(1200));
            archivos.agregar(new Empleado(750));
            archivos.agregar(new Empleado(3500));
            Empleado salarioEmpleado = archivos.getElemento(3);
            Console.WriteLine(salarioEmpleado.getSalario());

        }
    
    }
    class AlmacenObjetos<T>
    {
        private T [] datosElemento;
        private int i = 0;  
        public AlmacenObjetos(int z)
        {
            datosElemento = new T [z];  
        }
        public void agregar(T obj)
        {
            datosElemento[i] = obj;
            i++;   
        }
        public T getElemento(int i)
        {
            return datosElemento[i];
        }
    }
    class Empleado
    {
        private double salario;
        public Empleado(double salario)
        {
            this.salario = salario; 
        }
        public double getSalario()
        {
            return salario;
        }
    }
    //------------------GENERICOS CON RESTRICCIONES---------------
        static void Main(string[] args)
        {
            almacenEmpleados<Director> empleados = new almacenEmpleados<Director>(3);
            empleados.agregar(new Director(2500));
            empleados.agregar(new Director(1500));
            empleados.agregar(new Director(2000));
            Director salario = empleados.getEmpleado(1);
            Console.WriteLine(salario);

            almacenEmpleados<Secretaria> empleados2 = new almacenEmpleados<Secretaria>(3);
            empleados2.agregar(new Secretaria(2500));
            empleados2.agregar(new Secretaria(1500));
            empleados2.agregar(new Secretaria(2000));
            Secretaria salario2 = empleados2.getEmpleado(1);
            Console.WriteLine(salario);

            almacenEmpleados<Electricista> empleados3 = new almacenEmpleados<Electricista>(3);
            empleados3.agregar(new Electricista(2500));
            empleados3.agregar(new Electricista(1500));
            empleados3.agregar(new Electricista(2000));
            Electricista salario3 = empleados3.getEmpleado(2);
            Console.WriteLine(salario3);
        }

    }
    interface IParaEmpeados
    {
        double getSalario();
    }

    class almacenEmpleados<T> where T : IParaEmpeados   
    {
        private int i = 0;
        private T[] datosEmpleado;

        public almacenEmpleados(int z)
        {
            datosEmpleado = new T[z];   
        }
        public void agregar(T obj)
        {
            datosEmpleado[i] = obj;
            i++;
        }
        public T getEmpleado(int i)
        {
            return datosEmpleado[i];    
        }
    }
    class Director : IParaEmpeados
    {
        private double salario;
        public Director(int salario)
        {
            this.salario = salario;
        }
        public double getSalario()
        {
            return salario; 
        }
    }
    class Secretaria : IParaEmpeados
    {
        private double salario;
        public Secretaria(int salario)
        {
            this.salario = salario;
        }
        public double getSalario()
        {
            return salario;
        }
    }
    class Electricista : IParaEmpeados
    {
        private double salario;
        public Electricista(int salario)
        {
            this.salario = salario;
        }
        public double getSalario()
        {
            return salario;
        }
    }
    //--------------------------COLECCIONES---------------------
        static void Main(string[] args)
        {
            List<int> numeros = new List<int>();
            //int[] listaNumeros = new int[] {3, 6, 8, 10, 50 };

            //for(int i = 0; i < 5; i++)
            //{
            //    numeros.Add(listaNumeros[i]);
            //}

            //for(int i = 0; i < 5; i++)
            //{
            //    Console.WriteLine(numeros[i]);
            //}

            //Console.WriteLine("Cuantos elementos deseas introducir a la lista: ");
            //int datos = int.Parse(Console.ReadLine()); 

            //for(int  i = 0; i < datos; i++)
            //{
            //    numeros.Add(int.Parse(Console.ReadLine()));
            //}
            //Console.WriteLine("-------------------");
            //for (int i = 0;i < datos; i++)
            //{
            //    Console.WriteLine(numeros[i]);
            //}

            Console.WriteLine("Introduce elementos en la coleccion, (0 para salir!)");

            int elem = 1;

            while(elem != 0)
            {
                elem = int.Parse(Console.ReadLine());
                numeros.Add(elem);
            }
            numeros.RemoveAt(numeros.Count -1);//SETENCIA PARA ELIMINAR EL ULTIMO VALOR DEL INDICE INDICADO
            Console.WriteLine("Elementos introducidos");

            foreach(int elemento in numeros)
            {
                Console.WriteLine(elemento);    
            }
            //---------------------------LINKEDLIST-------------------------
        //static void Main(string[] args)
        //{
        //    LinkedList<int> numeros = new LinkedList<int>();  

        //    foreach(int num in new int[] {10, 8, 6, 4, 2, 0 })
        //    {
        //        numeros.AddLast(num);
        //    }
        //    //foreach(int num in numeros)
        //    //{
        //    //    Console.WriteLine(num);
        //    //}

        //    //numeros.Remove(6);
        //    LinkedListNode<int> nodoImp = new LinkedListNode<int>(15);
        //    numeros.AddFirst(nodoImp);

        //    for(LinkedListNode<int> nodo = numeros.First; nodo != null; nodo = nodo.Next)   //REVISAR EN LA DOCUMENTACION 
        //    {
        //        int numero = nodo.Value;
        //        Console.WriteLine(numero);
        //    }

        //}
        
        //------------------COLAS(QUEUE)-------------------
        static void Main(string[] args)
        {
            Queue<int> numeros= new Queue<int>();
             
            //RELLENANDO ELEMENTOS A LA COLA

            foreach(int num in new int[] { 2, 4, 6, 8, 10 })
            {
                numeros.Enqueue(num);
            }
            
            //RECORRIENDO LA COLA
            Console.WriteLine("Recorriendo el QUEUE");

            foreach(int num in numeros)
            {
                Console.WriteLine(num); 
            }

            //ELIMINANDO ELEMENTOS DEL QUEUE

            numeros.Dequeue();

            Console.WriteLine("Eliminando elementos");

            foreach (int num in numeros)
            {
                Console.WriteLine(num);
            }

        }
         //-----------------------STACKS O PILAS--------------------

        //static void Main(string[] args)
        //{
        //    Stack<int> numeros = new Stack<int>();

        //    //RELLENANDO ELEMENTOS A LA COLA

        //    foreach (int num in new int[] { 10, 20, 30, 40, 50 })
        //    {
        //        numeros.Push(num);
        //    }

        //    //RECORRIENDO LA COLA
        //    Console.WriteLine("Recorriendo la Pila");

        //    foreach (int num in numeros)
        //    {
        //        Console.WriteLine(num);
        //    }

        //    //ELIMINANDO ELEMENTOS DEL QUEUE

        //    numeros.Pop();

        //    Console.WriteLine("Eliminando elementos");

        //    foreach (int num in numeros)
        //    {
        //        Console.WriteLine(num);
        //    }

        
        //}
        
        //----------------------DICCIONARIOS----------------------

        static void Main(string[] args)
        {
            Dictionary<string, int> edades = new Dictionary<string, int>();

            //RELLENAR EL DICCIONARIO

            edades.Add("Juan", 18);
            edades.Add("Lucia", 35);

            edades["Maria"] = 25;
            edades["Antonio"] = 29;

            //RECORRER EL DICCIONARIO

            foreach(KeyValuePair<string, int> persona in edades)
            {
                Console.WriteLine("Nombre: {0} Edad: {1}", persona.Key, persona.Value);
            }

        }

        }
         //--------------------DELEGADOS-------------------


        //DEFINICION DEL OBJETO DELEGADO
        delegate void objetoDelegado();
        static void Main(string[] args)
        {
            //CREACION DEL OBJETO DELEGADO APUNTANDO A MENSAJEBIENVENIDA
            objetoDelegado elDelegado = new objetoDelegado(MensajeBienvenida.saludoBienvenida);
            //UTILIZACION DEL DELEGADO PARA LLAMAR AL METODO SALUDOBIENVENIDA
            elDelegado();
            elDelegado = new objetoDelegado(MensajeDespedida.saludoDespedida);
            elDelegado();
        }
    }
    class MensajeBienvenida
    {
        public static void saludoBienvenida()
        {
            Console.WriteLine("Hola que tal, bienvenidos");
        }
    }
    class MensajeDespedida
    {
        public static void saludoDespedida()
        {
            Console.WriteLine("Que tal, hasta luego");
        }
        static void Main(string[] args)
        {
            List<Personas> gente = new List<Personas>();
            Personas P1 = new Personas();

            P1.Nombre = "Juan";
            P1.Edad = 34;
            Personas P2 = new Personas();
            P2.Nombre = "Lucia";
            P2.Edad = 23;
            Personas P3 = new Personas();
            P3.Nombre = "Antonio";
            P3.Edad = 26;
            Personas P4 = new Personas();
            P4.Nombre = "Maria";
            P4.Edad = 18;

            gente.AddRange(new Personas[] {P1, P2, P3, P4});

            Predicate<Personas> elPredicado = new Predicate<Personas>(existeJuan);
            bool existe = gente.Exists(elPredicado);
            if (existe) Console.WriteLine("Existe Juan");
            else Console.WriteLine("No existe ese nombre");
        }

        static bool existeJuan(Personas persona)
        {
            if(persona.Nombre=="Juan")return true;
            else return false;
        }

    }
    class Personas
    {
        private string nombre;
        private int edad;

        public string Nombre { get => nombre; set => nombre = value; }
        public int Edad { get => edad; set => edad = value; }
    }
    }
    //--------------------------EXPRESIONES LAMBDA--------------------------


        //public delegate int operacionesMatematicas(int num);
        //public delegate int operacionesMatematicas2(int num1, int num2);
        //public delegate bool comparaPersonas(int edad1, int edad2);
        //public delegate bool comparaNombre(string nombre1, string nombre2);
        //static void Main(string[] args)
        //{
        //USO DEL DELEGADO
        //EXPRESION LAMBDA
        //operacionesMatematicas operacion = new operacionesMatematicas(num => num*num);
        //Console.WriteLine(operacion(7));
        //                                                                            //EXPRESION LAMBDA
        //operacionesMatematicas2 operacionSuma = new operacionesMatematicas2((numero1, numero2) => numero1 + numero2);
        //Console.WriteLine("La suma es: " + operacionSuma(4, 7));



        //Personas P1 = new Personas();
        //P1.Nombre = "Juan";
        //P1.Edad = 34;
        //Personas P2 = new Personas();
        //P2.Nombre = "Lucia";
        //P2.Edad = 23;

        //comparaPersonas comparaEdad = ((int persona1 , int persona2) => persona1==persona2);
        //Console.WriteLine(comparaEdad(P1.Edad, P2.Edad));

        //comparaNombre comparaNombre = ((string persona1 , string persona2)=> persona1==persona2);
        //Console.WriteLine(comparaNombre(P1.Nombre, P2.Nombre));



        //List<int> numeros = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        //                                        //EXPRESION LABDA
        //List<int> numerosPares = numeros.FindAll(i => i % 2 == 0);

        //foreach (int numero in numerosPares) Console.WriteLine(numero);

        //}
        //public static int cuadrado(int numero)
        //{
        //    return numero * numero;
        //}

        //public static int suma(int num1, int num2)
        //{
        //    return num1 + num2; 
        //}


        //}
        //class Personas
        //{
        //    private string nombre;
        //    private int edad;

        //    public string Nombre { get => nombre; set => nombre = value; }
        //    public int Edad { get => edad; set => edad = value; }
        //}
        //-------------------------EXPRESIONES REGULARES----------------------

        static void Main(string[] args)
        {
            string frase = "Mi nombre es Juan y mi numero de telefono es (+44)123-45-67, (+34)123-45-67 y mi codigo postal es 110103";

            //string patron = @"\d{3}-\d{2}-\d{2}";
            string patron = @"\+34|\+44";

            Regex miRegex = new Regex(patron);
            MatchCollection elMatch = miRegex.Matches(frase);

            if (elMatch.Count > 0) Console.WriteLine("Se ha encontrado numeros");
            else Console.WriteLine("No se ha encontrado numeros");
        }
}

